# -*- coding: utf-8 -*-
"""Graph#7 problem

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/11C3EsHMHZvJbllIk7nGFNRwjKtBilnI7
"""

import re
import networkx as nx
import matplotlib.pyplot as plt

def parse_input(s):
    pairs = re.findall(r'\(\s*([A-Za-z])\s*,\s*(\d+)\s*\)', s)
    return [(v, int(x)) for v, x in pairs]

def build_graph(pairs):

    n = len(pairs)
    names = [v for v, _ in pairs]
    idx = {v:i for i,v in enumerate(names)}
    edges = []

    mat = [[0]*n for _ in range(n)]

    for i, (v, x) in enumerate(pairs):
        step = x % n
        left_i  = (i - step + n) % n
        right_i = (i + step)     % n

        for j in (left_i, right_i):
            if j != i:  # skip self‐loops if x % n == 0
                w = names[j]
                edges.append((v, w))
                mat[idx[v]][idx[w]] = 1

    return names, edges, mat

def print_adjacency_matrix(names, mat):
    """Textual adjacency‐matrix output."""
    print("   " + " ".join(names))
    for name, row in zip(names, mat):
        print(f"{name}  " + " ".join(str(c) for c in row))

def draw_graph(names, edges):
    """Draw with NetworkX in a circular layout."""
    G = nx.DiGraph()
    G.add_nodes_from(names)
    G.add_edges_from(edges)

    pos = nx.circular_layout(G)
    plt.figure(figsize=(6,6))
    nx.draw(G, pos,
            with_labels=True,
            arrowsize=20,
            node_size=800,
            font_size=14)
    plt.title("Directed Graph")
    plt.axis('off')
    plt.show()

if __name__ == "__main__":
    s = input("Enter graph as [(V, x), (V, x), …]:\n")
    pairs = parse_input(s)
    if not pairs:
        print("Empty graph.")
        exit()

    names, edges, mat = build_graph(pairs)

    print("\nAdjacency Matrix:")
    print_adjacency_matrix(names, mat)

    print("\nDrawing graph…")
    draw_graph(names, edges)